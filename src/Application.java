import data.DummyAccountData;
import service.AccountService;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.Scanner;

import static util.Validator.*;

public class Application {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AccountService accountService = new AccountService(new DummyAccountData());

        while (true) {
            welcomeScreen(scanner, accountService);
            break;
        }
    }

    public static void welcomeScreen(Scanner scanner, AccountService accountService) {
        while (true) {
            System.out.print("Enter Account Number: ");
            String accountNumber = scannerLogin(scanner, 6, "Account Number");
            System.out.print("Enter PIN: ");
            String pin = scannerLogin(scanner, 6, "PIN");

            if (accountService.login(accountNumber, pin)) {
                transactionScreen(scanner, accountService);
            }

            System.out.println("Invalid Account Number/PIN");
        }
    }

    public static void transactionScreen(Scanner scanner, AccountService accountService) {
        String message = "\n" + "1. Withdraw\n" +
                "2. Fund Transfer\n" +
                "3. Exit\n" +
                "Please choose option[3]: ";

        while (true) {
            System.out.print(message);

            String option = scannerOption(scanner, 1, 3, message);
            switch (option) {
                case "1" -> withdrawScreen(scanner, accountService);
                case "2" -> fundTransferScreen(scanner, accountService);
                default -> welcomeScreen(scanner, accountService);
            }
        }
    }

    public static void withdrawScreen(Scanner scanner, AccountService accountService) {
        String message = "\n" + "1. $10\n" +
                "2. $50\n" +
                "3. $100\n" +
                "4. Other\n" +
                "5. Back\n" +
                "Please choose option[5]: ";

        while (true) {
            System.out.print(message);

            String option = scannerOption(scanner, 1, 5, message);
            switch (option) {
                case "1" -> {
                    if (accountService.withdraw(10)) {
                        summaryScreen(scanner, accountService, "10");
                    }
                }
                case "2" -> {
                    if (accountService.withdraw(50)) {
                        summaryScreen(scanner, accountService, "50");
                    }
                }
                case "3" -> {
                    if (accountService.withdraw(100)) {
                        summaryScreen(scanner, accountService, "100");
                    }
                }
                case "4" -> otherWithdrawScreen(scanner, accountService);
                default -> transactionScreen(scanner, accountService);
            }
        }
    }

    public static void otherWithdrawScreen(Scanner scanner, AccountService accountService) {
        String message = "\n" + "Other Withdraw\n" +
                "Enter amount to withdraw: $";

        while (true) {
            System.out.print(message);
            String amount = scannerAmount(scanner, 10, 1000, message);
            if (accountService.withdraw(Integer.parseInt(amount))) {
                summaryScreen(scanner, accountService, amount);
            }
        }
    }

    public static void fundTransferScreen(Scanner scanner, AccountService accountService) {
        String message1 = "\n" + "Please enter destination account and \n" +
                "press enter to continue or \n" +
                "press cancel (Esc) to go back to Transaction: ";
        String message2 = "\n" + "Please enter transfer amount and press enter to continue or \n" +
                "press enter to go back to Transaction: $";
        String message3 = "\n" + "Reference Number: (This is an autogenerated random 6 digits number)\n" +
                "press enter to continue or press enter to go back to Transaction: ";


        while (true) {
            System.out.print(message1);
            String accountNumber = scannerTransferAccount(scanner, 6, message1);

            System.out.print(message2);
            String amount = scannerTransferAmount(scanner, 1, 1000, message2);

            System.out.print(message3);
            String referenceNumber = scannerTransferReference(scanner, 6, message3);


            String message4 = "\n" + "Transfer Confirmation\n" +
                    "Destination Account : " + accountNumber + "\n" +
                    "Transfer Amount     : $" + amount + "\n" +
                    "Reference Number    : " + referenceNumber + "\n" +
                    "\n" +
                    "1. Confirm Trx\n" +
                    "2. Cancel Trx\n" +
                    "Choose option[2]: ";
            System.out.print(message4);
            String option = scannerOption(scanner, 1, 2, message4);
            if ("1".equals(option) && accountService.transfer(accountNumber, Integer.parseInt(amount))) {
                summaryScreen(scanner, accountService, amount);
            } else {
                transactionScreen(scanner, accountService);
            }
        }
    }

    public static void summaryScreen(Scanner scanner, AccountService accountService, String amount) {
        DateTimeFormatter formatter = new DateTimeFormatterBuilder().toFormatter();
        String message = "\n" + "Summary\n" +
                "Date : " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd hh:mm a")) + "\n" +
                "Withdraw : $" + amount + "\n" +
                "Balance : $" + accountService.getLoggedAccount().getBalance() + "\n" +
                "\n" +
                "1. Transaction \n" +
                "2. Exit\n" +
                "Choose option[2]:";

        while (true) {
            System.out.print(message);

            String option = scannerOption(scanner, 1, 2, message);
            if ("1".equals(option)) {
                transactionScreen(scanner, accountService);
            } else {
                welcomeScreen(scanner, accountService);
            }
        }
    }


}
